/* NOTE: This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

/**
 *  Check the node version to be make sure user installed project supported node.
 *  If ui-build runs with generatedAngularApp mode it should generate the angular app for the project.
 *  Build the angular app in WM mode or angular.
 *  If it is WM mode install app-runtime-wm-build npm package and copy the script to src/main/webapp based on the platform type(web/mobile)
 *  If it angular mode install codegen package and run the generate and build angular app script.
 *
 *  CONSOLE ARGUMENTS:-
 *  nodeVMArgs:String: Node environment params  (Eg: '--max-old-space-size=2040')
 *  ngBuildParams:String: Anglar build params (Eg: '--prod=true --source-map=false')
 *  runtimeUIVersion:String: Runtime version (Eg: 10.6.6-next.10243) and  wavemaker-app-runtime-wm-build
 *  appSrc:String: Source folder to generate the angular app (current directory Eg: '.')
 *  appTarget: Target folder to save the generated app (Eg: 'target/ui-build/generated-app')
 *  buildType: Application build type (Eg: angular/wm)
 *  platformType: Application platform (Eg: web/mobile)
 *  optimizeUIBuild : By default this flag will be true. If it's windows platform we are making the flag to false, it means no optimisation for  windows.
 *  generateAngularApp: To generate the angular app for the project
 */

 const { execSync } = require("child_process");
 const fs = require('fs');
 const os = require('os');
 const UI_BUILD_ERROR_LOG = 'UI BUILD ERROR';

 const MSG_CODEGEN_LOG = 'CODEGEN ANGULAR APP: ';
 const MSG_APP_RUNTIME_WM_BUILD_LOG = 'APP RUNTIME WM BUILD : ';

 const MSG_ANGULAR_CODEGEN_SUCCESS = 'ANGULAR_CODEGEN_SUCCESS';
 const MSG_APP_RUNTIME_WM_BUILD_SUCCESS = 'WAVEMAKER_APP_RUNTIME_WM_BUILD_SUCCESS';

 const NPM_PACKAGE_SCOPE = '@wavemaker';

 /**
 * This function is executed successfully if the system node version is in a specified range. If not, the process will be killed
 *
 */
const checkNodeVersion = () => {
    if (!isSystemHasValidNodeVersion()) {
        console.log("\x1b[31m", "-------******* Project configuration doesn't meet, Please install and use Node Version 10.15.X *******-------");
        console.log("\x1b[31m", "-------******* Your current Node Version is: " + process.versions.node + " *******-------");
        process.exit(1);
    } else {
        console.log("\x1b[47m\x1b[32m%s\x1b[0m", "-------******* Good to Go with your Node Version: " + process.versions.node + " *******-------");
    }

}

/**
 *  Return 1 if systemInstalledVersion > requiredVersion
 *  Return -1 if systemInstalledVersion < requiredVersion
 *  Return 0 if systemInstalledVersion == requiredVersion
 */
const compareNodeVersion = (requiredVersion) => {
    let systemInstalledVersion = process.versions.node;
    if (systemInstalledVersion === requiredVersion) {
        return 0;
    }

    let systemInstalledVersion_components = systemInstalledVersion.split(".");
    let requiredVersion_components = requiredVersion.split(".");

    let len = Math.min(systemInstalledVersion_components.length, requiredVersion_components.length);

    // loop while the components are equal
    for (let i = 0; i < len; i++) {
        // systemInstalledVersion bigger than requiredVersion
        if (parseInt(systemInstalledVersion_components[i]) > parseInt(requiredVersion_components[i])) {
            return 1;
        }

        // requiredVersion bigger than systemInstalledVersion
        if (parseInt(systemInstalledVersion_components[i]) < parseInt(requiredVersion_components[i])) {
            return -1;
        }
    }

    // If one's a prefix of the other, the longer one is greater.
    if (systemInstalledVersion_components.length > requiredVersion_components.length) {
        return 1;
    }

    if (systemInstalledVersion_components.length < requiredVersion_components.length) {
        return -1;
    }

    // Otherwise they are the same.
    return 0;
}

/**
 *  To restrict the node version in the given range
 * @returns boolean true/false
 */
const isSystemHasValidNodeVersion = () => {
    const nodeMinVersion = '10.15.0';
    const nodeMaxVersion = '10.15.9999';
    if (compareNodeVersion(nodeMinVersion) >= 0 && compareNodeVersion(nodeMaxVersion) < 0) {
        return true;
    } else {
        return false;
    }
}

/**
 * To check the system node version is valid or not for the project
 */
checkNodeVersion();


 /**
  * Read the console arguments and prepare the object.
  * @returns console arguments as key value pairs
  */
 const getArgs = () => {
     const args = {};
     process.argv
         .slice(2, process.argv.length)
         .forEach(arg => {
             if (arg.slice(0, 2) === '--') {
                 const longArg = arg.split('=');
                 const longArgFlag = longArg[0].slice(2, longArg[0].length);
                 const longArgValue = longArg.length > 2 ? longArg.slice(1, longArg.length).join('=') : longArg[1];
                 args[longArgFlag] = longArgValue;
             }
         });
     return args;
 }

 const args = getArgs();


 // TO capture the ctrl+C signal
 process.on('SIGINT', function (e) {
     console.log("Caught interrupt signal", e);
     process.exit(1);
 });

 const EXECUTE_SYNC_CONFIG = { stdio: 'inherit' };


 /**
  *  To check the npm package installation successs or not
  * @param {*} path  File path where installation success message was written
  * @param {*} msg   Success messsage to confirm that package was installed
  * @returns boolean true/false
  */
 const isNPMPackageExist = (path, msg) => {
     if (fs.existsSync(path)) {
         const successMsg = fs.readFileSync(path, { encoding: 'utf8', flag: 'r' });
         if (successMsg == msg) {
             return true;
         }

     } else {
         return false;
     }
 }

 /**
  *  Copy source to destination each file by navigating to the folder recursively
  * @param {string} src  Source folder to copy.
  * @param {string} dest Destination folder to copy.
  */
 const copyRecursiveSync = (src, dest) => {
     var exists = fs.existsSync(src);
     var stats = exists && fs.statSync(src);
     var isDirectory = exists && stats.isDirectory();
     if (isDirectory) {
         if (!fs.existsSync(dest)) {
             fs.mkdirSync(dest, { recursive: true });
         }
         fs.readdirSync(src).forEach(function (childItemName) {
             copyRecursiveSync(src + '/' + childItemName, dest + '/' + childItemName);
         });
     } else {
         fs.copyFileSync(src, dest);
     }
 };

 /**
  * To run the system command via node  child process.
  * @param {*} cmd Command in string format to execute in node environment
  * @param {*} errorCallback callback if anything needs to be handled on command failure
  */
 const executeSyncCmd = (cmd, errorCallback, msg) => {
     try {
         console.log(msg + 'Current running cmd: ' + cmd)
         execSync(cmd, { stdio: 'inherit' });
     } catch (err) {
         if (errorCallback) {
             errorCallback(err);
         }
         console.log(msg + 'FAILED command: ' + cmd, err);
         process.exit(err.code || err.pid);
     }
 }

 /**
  *  Check  node modules package were installed or not
  *  Create dir for  packages with the version name
  *  Copy the generated angular app package.json to PATH_NPM_PACKAGE folder
  *  Run npm install
  *  Write  success file to be make sure it was installed successfully.
  */
 const downloadNPMPackage = (packageInfo) => {
     const HOME_DIR = os.homedir();
     const PATH_NPM_PACKAGE = (packageInfo.baseDir || HOME_DIR + '/.wm/node_modules/' ) + packageInfo.name + '/' + packageInfo.version;
     const PATH_NPM_PACKAGE_SUCCESS = PATH_NPM_PACKAGE + '/.SUCCESS';

     // To check global app runtime node modules.
     if (!isNPMPackageExist(PATH_NPM_PACKAGE_SUCCESS, packageInfo.successMsg)) {
         fs.mkdirSync(PATH_NPM_PACKAGE, { recursive: true });
         let npmInstallCMD = 'npm install ';
         if (packageInfo.packageJsonFile && fs.existsSync(packageInfo.packageJsonFile)) {
             fs.copyFileSync(packageInfo.packageJsonFile, PATH_NPM_PACKAGE + '/package.json');
         } else {
             npmInstallCMD = 'npm init -y &&  ' + npmInstallCMD + packageInfo.scope + '/' + packageInfo.name + '@' + packageInfo.version;
         }

         executeSyncCmd('cd ' + PATH_NPM_PACKAGE + ' && ' + npmInstallCMD, () => {
             console.log(packageInfo.infoMsg + ' Something wrong with npm installation');
         }, packageInfo.infoMsg);

         fs.writeFileSync(PATH_NPM_PACKAGE_SUCCESS, packageInfo.successMsg);
     } else {
         console.log(packageInfo.infoMsg + ' Node packages already installed!');
     }

     return PATH_NPM_PACKAGE;

 }

 /**
  *  Check the app-runtime-wm-build npm package already installed or not.
  *  Install the app-runtime-wm-build if package not yet installed.
  *  Based on the platform type copy the bundle script into '/src/main/webapp'
  * @param {*} sourceDir
  * @returns
  */
 const buildAppInWMMode = (sourceDir) => {

     /**
     * Download app-runtime-wm-build package and install if it doesn't exist
     */
     let appRuntimeWMBuildPackageInfo = {
         scope: NPM_PACKAGE_SCOPE,
         version: args.runtimeUIVersion,
         name: 'app-runtime-wm-build',
         packageJsonFile: '',
         successMsg: MSG_APP_RUNTIME_WM_BUILD_SUCCESS,
         infoMsg: MSG_APP_RUNTIME_WM_BUILD_LOG

     }
     const PATH_WAVEMAKER_APP_RUNTIME_WM_BUILD = downloadNPMPackage(appRuntimeWMBuildPackageInfo);

     const FILE_PATH_WAVEMAKER_APP_RUNTIME_WM_BUILD = PATH_WAVEMAKER_APP_RUNTIME_WM_BUILD + '/node_modules/' + appRuntimeWMBuildPackageInfo.scope + '/' + appRuntimeWMBuildPackageInfo.name + '/';

     const PLATFORM_TYPE = { WEB: 'wmapp', MOBILE: 'wmmobile' }
     let bundleFolder = '';
     if (args.platformType === PLATFORM_TYPE.WEB) {
        bundleFolder = 'wmapp/';
     } else if (args.platformType = PLATFORM_TYPE.MOBILE) {
        bundleFolder = 'wmmobile/';
     } else {
         console.log(UI_BUILD_ERROR_LOG + ' Invalid script path!');
         return;
     }
     copyRecursiveSync(FILE_PATH_WAVEMAKER_APP_RUNTIME_WM_BUILD + bundleFolder, sourceDir + '/target/ui-build/output-files/' + bundleFolder);
 }

 /**
  * To check the platform is windows or not
  * @returns boolean
  */
 const isWindows = () => {
     return process.platform === "win32";
 }

/**
  * Download angular codegen package and install if it is doesn't exist
  * @returns Return the codegen package path
 */
 const downloadCodegenAndGetTheInstallationPath = (basedir) => {
        let codegenPackageInfo = {
            scope: NPM_PACKAGE_SCOPE,
            version: args.runtimeUIVersion,
            name: 'angular-codegen',
            packageJsonFile: '',
            successMsg: MSG_ANGULAR_CODEGEN_SUCCESS,
            infoMsg: MSG_CODEGEN_LOG

        };
        codegenPackageInfo.baseDir = basedir;
        const PATH_ANGULAR_CODEGEN =  downloadNPMPackage(codegenPackageInfo);
        return PATH_ANGULAR_CODEGEN + '/node_modules/' + codegenPackageInfo.scope + '/' + codegenPackageInfo.name + '/';
 }

 /**
  *
  * @param {*} sourceDir project source directory to generate the angular app
  * @param {*} ngBuildParams angular app build params along with cdn URL
  * @param {*} codegenPath codegen path to generate the angular app
  *  Generate the angular app from codegen in target folder
  */
 const generateAngularApp = (sourceDir, ngBuildParams, codegenPath, appTarget) => {

      executeSyncCmd('node  ' + codegenPath + 'generate-angular-app.js'
            + ' --codegenPath="' + codegenPath + '"'
            + ' --ngBuildParams="' + ngBuildParams + '"'
            + ' --appSrc="' + sourceDir + '"'
            + ' --appTarget="' + appTarget + '"', null, MSG_CODEGEN_LOG);
 }

 /**
  * validate the cdn url and returns the angular build params
  * @returns build params
  */
 const getNgBuildParams = () => {
    let cdnUrl = args.cdnUrl ? args.cdnUrl.trim() : '';
    // If cdnUrl doesn't have trailing slash add it;
    const slash = '/';
    if (cdnUrl && cdnUrl.charAt(cdnUrl.length - 1) != slash) {
        cdnUrl += slash;
    }

    let ngBuildParams = args.ngBuildParams;
    // If cdn-url exist add the build params as deploy-url and output-hashing
    if (cdnUrl) {
        ngBuildParams += ` --deploy-url=${cdnUrl} --output-hashing=all`;
    }
    return ngBuildParams;
 }

 /**
  *  Check codgen npm package already installed or not.
  *  Install the codegen if package not yet installed.
  *  Run generate and build angular script.
  *  Prepare the ng-build params deploy url if cdn url present in arguments
  * @param {*} sourceDir
  */
 const buildAppInAngularMode = (sourceDir) => {
    let appTarget = (args.appTarget || 'target/ui-build/generated-app');
    let ngBuildParams = getNgBuildParams();

  /**
   * By default optimizeUIBuild will be true.
   * If environment is windows then optimizeUIBuild flag will be false which install all node modules.
   * If otherhen windows symlink the node_modules
   */
    let  optimizeUIBuild;
    if(args.optimizeUIBuild) {
         optimizeUIBuild = args.optimizeUIBuild === 'true';
    } else {
         optimizeUIBuild =  !isWindows();
    }
    let pathAngularCodegen;
    /**
     * If optimization enabled download it in .wm folder at homedir
     * If optimization not enabled download it in appTarget folder
     * Download angular codegen package and install if it doesn't exist
     */
    pathAngularCodegen = downloadCodegenAndGetTheInstallationPath(optimizeUIBuild ? undefined : appTarget.split('/').slice(0,2).join('/') + '/');

    generateAngularApp(sourceDir, ngBuildParams, pathAngularCodegen, appTarget);

     const SCRIPT_PATH_ANGULAR_APP_GENERATOR = pathAngularCodegen + 'build-angular-app.js  ';

     const CMD_ARGS_GENERATE_AND_BUILD_ANGULAR_APP = ' --nodeVMArgs="' + args.nodeVMArgs + '" --ngBuildParams="' + ngBuildParams + '" --runtimeUIVersion="' + args.runtimeUIVersion + '"  --appSrc="' + sourceDir + '" --appTarget="' + appTarget  + '" --codegenPath="' + pathAngularCodegen + '" --optimizeUIBuild="' + optimizeUIBuild + '"';

     const NODE_CMD_GENERATE_AND_BUILD_ANGULAR_APP = 'node ' + SCRIPT_PATH_ANGULAR_APP_GENERATOR + CMD_ARGS_GENERATE_AND_BUILD_ANGULAR_APP;
     //  build angular app.
     execSync(NODE_CMD_GENERATE_AND_BUILD_ANGULAR_APP, EXECUTE_SYNC_CONFIG);

     copyRecursiveSync(sourceDir + '/target/ui-build/generated-app/dist/', sourceDir + '/target/ui-build/output-files/');
 }

 /**
  *  generateAngularApp : If it is just to generate the angular app in project.
  * If wm buildType , do the build in wavemaker mode.
  * If angular buildType, do the build in angular mode.
  */
 const init = () => {
     const BUILD_TYPE = { WM: 'wm', ANGULAR: 'angular' };
     const sourceDir = (args.appSrc || '.');
     if (args.generateAngularApp) {
        const  FILE_PATH_CODEGEN_INSTALLATION = downloadCodegenAndGetTheInstallationPath();
        generateAngularApp(sourceDir, getNgBuildParams(), FILE_PATH_CODEGEN_INSTALLATION, args.appTarget);
     } else if (args.buildType === BUILD_TYPE.WM) {
         buildAppInWMMode(sourceDir);
     } else if (args.buildType === BUILD_TYPE.ANGULAR) {
         buildAppInAngularMode(sourceDir);
     }
 }
 init();
 